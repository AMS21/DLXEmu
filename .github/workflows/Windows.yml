name: Windows

on:
  push:
    paths:
      # Workflow file itself
      - '.github/workflows/Windows.yml'
      # C++ files
      - '**.cpp'
      - '**.hpp'
      # CMake files
      - '**.cmake'
      - '**.txt'
      # Script files
      - '**.sh'
    tags:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.head_ref || github.run_number }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  Build:
    runs-on: windows-2022

    # Default windows to use bash
    defaults:
      run:
        shell: bash

    env:
      CMAKE_BUILD_PARALLEL_LEVEL: "2"
      CTEST_PARALLEL_LEVEL: "2"
      CTEST_OUTPUT_ON_FAILURE: "ON"
      CMAKE_GENERATOR: 'Ninja'
      # Sanitizers
      ASAN_OPTIONS: "quarantine_size_mb=1024:redzone=256:strict_string_checks=1:detect_odr_violation=2:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=0:detect_leaks=1:print_stats=1:use_odr_indicator=1:strict_memcmp=1:print_scariness=1:handle_abort=1:symbolize=1:handle_segv=1:handle_sigill=1:allocator_release_to_os_interval_ms=500:handle_sigfpe=1:handle_sigbus=1:alloc_dealloc_mismatch=1:check_malloc_usable_size=1"
      LSAN_OPTIONS: "report_objects=1:use_unaligned=1"
      TSAN_OPTIONS: "halt_on_error=1:history_size=3:force_seq_cst_atomics=1"
      UBSAN_OPTIONS: "print_stacktrace=1:report_error_type=1:halt_on_error=1"

    strategy:
      fail-fast: false

      matrix:
        cfg:
          - { compiler: cl }
          #- { compiler: g++ }
          - { compiler: clang++ }
          #- { compiler: clang++, sanitizer: "ubsan" }

        build_type:
          - "Debug"
          - "RelWithDebInfo"
          - "Release"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install cmake
        uses: lukka/get-cmake@v3.23.0

      - name: Install
        shell: powershell
        run: |
          # Install scoop
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin

          # Install required compilers
          if ("${{ matrix.cfg.compiler }}".StartsWith("clang")) {
            # Clang
            scoop install llvm --global
            echo "CXX=${{ matrix.cfg.compiler }}" >> $GITHUB_ENV
            echo "C:\ProgramData\scoop\apps\llvm\current\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }
          elseif ("${{ matrix.cfg.compiler }}" -eq "g++") {
            # GCC
            scoop install gcc --global
            echo "CXX=${{ matrix.cfg.compiler }}" >> $GITHUB_ENV
            echo "C:\ProgramData\scoop\apps\gcc\current\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }

          scoop install ninja --global

      - name: Setup msvc dev
        if: matrix.cfg.compiler == 'cl'
        uses: ilammy/msvc-dev-cmd@v1.11.0

      - name: Configure build directory
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-DDLXEMU_VERIFY_UNDO_REDO -DDLXEMU_VERIFY_COLUMN" ..

      - name: Build
        working-directory: ./build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: ./build
        run: ctest . -C ${{ matrix.build_type }}
