name: Linux

on:
  push:
    paths:
      # Workflow file itself
      - '.github/workflows/Linux.yml'
      # C++ files
      - '**.cpp'
      - '**.hpp'
      # CMake files
      - '**.cmake'
      - '**.txt'
      # Script files
      - '**.sh'
    tags:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:

jobs:
  Build:
    runs-on: ubuntu-22.04

    env:
      FUZZING_TIME: "120" # 2 Minutes
      FUZZING_BUILD_FLAGS: "-coverage -fsanitize=address,undefined,float-divide-by-zero,local-bounds,nullability -fno-sanitize-recover=all -g -fno-omit-frame-pointer -fno-optimize-sibling-calls -fno-common -fno-inline-functions -DPHI_DEBUG -DDLXEMU_VERIFY_UNDO_REDO -DDLXEMU_VERIFY_COLUMN"

    strategy:
      fail-fast: false

      matrix:
        compiler:
          - "gcc-12"
          - "clang-14"

        build_type:
          - "Debug"
          - "RelWithDebInfo"
          - "Release"

        dynamic_test:
          - "none"
          - "asan"
          - "lsan"
          - "tsan"
          - "ubsan"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.compiler }}

      - name: Setup Environment
        run: external/Phi/scripts/ci/SetupEnvironment.sh

      - name: Install compiler
        run: external/Phi/scripts/ci/InstallTools.sh ${{ matrix.compiler }} ninja

      - name: Install gcovr
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: external/Phi/scripts/ci/InstallTools.sh gcovr

      - name: Install cmake
        uses: lukka/get-cmake@v3.23.0

      - name: Install dependencies
        run: scripts/ci/InstallDependencies.sh

      - name: Configure build directory
        run: |
          mkdir build -p
          cd build

          cmake -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-DDLXEMU_VERIFY_UNDO_REDO -DDLXEMU_VERIFY_COLUMN" -DDLXEMU_ENABLE_ASAN:BOOL=${{ matrix.dynamic_test == 'asan' }} -DDLXEMU_ENABLE_LSAN:BOOL=${{ matrix.dynamic_test == 'lsan' }} -DDLXEMU_ENABLE_TSAN:BOOL=${{ matrix.dynamic_test == 'tsan' }} -DDLXEMU_ENABLE_UBSAN:BOOL=${{ matrix.dynamic_test == 'ubsan' }} ..

      - name: Build
        working-directory: ./build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: ./build
        run: ctest . -C ${{ matrix.build_type }}

      - name: Run fuzzers
        if: matrix.compiler == 'clang*' && matrix.dynamic_test != 'tsan'
        working-directory: ./build
        run: |
          cmake .. -DCMAKE_CXX_FLAGS="$FUZZING_BUILD_FLAGS"
          cmake --build . --clean-first
          ctest . -C Debug

          fuzzers=$(find $BINARY_DIR -type f -iname "fuzz_*")
          echo "Found fuzzers:"
          echo "$fuzzers"

          for fuzzer in $fuzzers
          do
            printf "**********\nRunning $fuzzer\n**********\n"

            $fuzzer -timeout=1 -use_value_profile=1 -print_pcs=1 -print_final_stats=1 -max_total_time=$FUZZING_TIME -close_fd_mask=1 | tee $fuzzer.log
          done
