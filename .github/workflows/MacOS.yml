name: MacOS

on:
  push:
    paths:
      # Workflow file itself
      - '.github/workflows/MacOS.yml'
      # C++ files
      - '**.cpp'
      - '**.hpp'
      # CMake files
      - '**.cmake'
      - '**.txt'
    tags:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Build:
    runs-on: macos-12

    env:
      CMAKE_BUILD_PARALLEL_LEVEL: "2"
      CTEST_PARALLEL_LEVEL: "2"
      CTEST_OUTPUT_ON_FAILURE: "ON"
      # Sanitizers
      ASAN_OPTIONS: "quarantine_size_mb=1024:redzone=256:strict_string_checks=1:detect_odr_violation=2:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=0:print_stats=1:use_odr_indicator=1:strict_memcmp=1:print_scariness=1:handle_abort=1:symbolize=1:handle_segv=1:handle_sigill=1:allocator_release_to_os_interval_ms=500:handle_sigfpe=1:handle_sigbus=1:alloc_dealloc_mismatch=1:check_malloc_usable_size=1"
      LSAN_OPTIONS: "report_objects=1:use_unaligned=1"
      TSAN_OPTIONS: "halt_on_error=1:history_size=3:force_seq_cst_atomics=1"
      UBSAN_OPTIONS: "print_stacktrace=1:report_error_type=1:halt_on_error=1"

    strategy:
      fail-fast: false
      matrix:
        cfg:
          #- { compiler: gcc,   compiler_version: "12" }
          - { compiler: clang, compiler_version: "14.2" }

        build_type:
          - "Debug"
          - "RelWithDebInfo"
          - "Release"

        dynamic_test:
          - "none"
          - "asan"
          - "tsan"
          - "ubsan"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.cfg.compiler }}-${{ matrix.cfg.compiler_version }}

      - name: Install cmake
        uses: lukka/get-cmake@v3.25.2

      - name: Setup XCode
        if: matrix.cfg.compiler == 'clang'
        uses: maxim-lobanov/setup-xcode@v1.5.1
        with:
          xcode-version: ${{ matrix.cfg.compiler_version }}

      - name: Install ninja
        run: brew install ninja

      - name: Install
        run: |
          if [ "${{ matrix.cfg.compiler }}" = "gcc" ]; then
            brew install gcc@${{ matrix.cfg.compiler_version }}
            echo "CC=gcc-${{ matrix.cfg.compiler_version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.cfg.compiler_version }}" >> $GITHUB_ENV
          elif [ "${{ matrix.cfg.compiler}}" = "clang" ]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi

      - name: Configure build directory
        run: |
          mkdir build -p
          cd build

          cmake -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-DDLXEMU_VERIFY_UNDO_REDO -DDLXEMU_VERIFY_COLUMN" -DDLXEMU_ENABLE_ASAN:BOOL=${{ matrix.dynamic_test == 'asan' }} -DDLXEMU_ENABLE_LSAN:BOOL=${{ matrix.dynamic_test == 'lsan' }} -DDLXEMU_ENABLE_TSAN:BOOL=${{ matrix.dynamic_test == 'tsan' }} -DDLXEMU_ENABLE_UBSAN:BOOL=${{ matrix.dynamic_test == 'ubsan' }} ..

      - name: Build
        working-directory: ./build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: ./build
        run: ctest . -C ${{ matrix.build_type }}
